#include "led_display.h"
#include "lcd_font.h"

/*
PCtoLCD2002完美版，字模配置
阳码，逐行，逆向
点阵32，索引16
*/
u8 buf[][32] =
{
//播出，宋体
{0xFB,0xE1,0x1B,0xFC,0xBB,0xED,0x7B,0xF5,0x20,0xC0,0x7B,0xF5,0xBB,0xED,0xCB,0x9F,0x33,0xE0,0xB8,0xED,0xBB,0xED,0x3B,0xE0,0xBB,0xED,0xBB,0xED,0x3A,0xE0,0xBD,0xEF},/*"播",0*/

{0x7F,0xFF,0x7F,0xFF,0x7B,0xEF,0x7B,0xEF,0x7B,0xEF,0x7B,0xEF,0x03,0xE0,0x7F,0xEF,0x7F,0xFF,0x7F,0xFF,0x7D,0xDF,0x7D,0xDF,0x7D,0xDF,0x7D,0xDF,0x01,0xC0,0xFF,0xDF},/*"出",1*/

//播出，宋体加粗
{0xF3,0xC1,0x13,0xF8,0x33,0xC9,0x73,0xE0,0x00,0x80,0x73,0xE0,0x33,0xC9,0x83,0x1F,0x23,0xC0,0x30,0xC9,0x33,0xC9,0x33,0xC0,0x33,0xC9,0x33,0xC9,0x30,0xC0,0x39,0xCF},/*"?",0*/

{0x7F,0xFE,0x7F,0xFE,0x73,0xCE,0x73,0xCE,0x73,0xCE,0x73,0xCE,0x03,0xC0,0x7F,0xCE,0x7F,0xFE,0x7F,0xFE,0x79,0x9E,0x79,0x9E,0x79,0x9E,0x79,0x9E,0x01,0x80,0xFF,0x9F},/*"?",1*/
	
//倒计，宋体

{0xF7,0xDF,0xF7,0xDF,0x07,0xDC,0xBB,0xD7,0xBB,0xD7,0xD9,0xD6,0x19,0xD4,0x7A,0xD7,0x7B,0xD7,0x1B,0xD4,0x7B,0xD7,0x7B,0xD7,0x7B,0xDC,0x8B,0xDF,0xDB,0xD7,0xFB,0xEF},/*"?",0*/

{0xFF,0xFD,0xFB,0xFD,0xF7,0xFD,0xF7,0xFD,0xFF,0xFD,0xFF,0xFD,0x10,0x80,0xF7,0xFD,0xF7,0xFD,0xF7,0xFD,0xF7,0xFD,0xF7,0xFD,0xD7,0xFD,0xE7,0xFD,0xF7,0xFD,0xFF,0xFD},/*"?",1*/

//倒计，宋体加粗
{0xE7,0x9F,0xE7,0x9F,0x07,0x98,0x33,0x87,0x33,0x87,0x91,0x84,0x11,0x80,0x70,0x86,0x73,0x86,0x13,0x80,0x73,0x86,0x73,0x86,0x73,0x98,0x03,0x9F,0x93,0x87,0xF3,0xCF},/*"?",0*/

{0xFF,0xF9,0xF3,0xF9,0xE7,0xF9,0xE7,0xF9,0xFF,0xF9,0xFF,0xF9,0x00,0x00,0xE7,0xF9,0xE7,0xF9,0xE7,0xF9,0xE7,0xF9,0xE7,0xF9,0x87,0xF9,0xC7,0xF9,0xE7,0xF9,0xFF,0xF9},/*"?",1*/


};





void LED_DISPLAY::begin(u16 p_light)
{
	light = p_light;
	mode = 0;
	_74hc595::begin();
	ADDR_A0.mode(OUTPUT_PP);
	ADDR_A1.mode(OUTPUT_PP);
	ADDR_A2.mode(OUTPUT_PP);
	ADDR_A3.mode(OUTPUT_PP);
	ENABLE.mode(OUTPUT_PP);
	ENABLE.reset();
	//显示字模控制

	
}
void LED_DISPLAY::display(u8 enable)
{
	if(enable == 0)
			ENABLE.set();
	else
			ENABLE.reset();

}

void LED_DISPLAY::set(u8	p_mode)
{
	mode = p_mode;
}



void LED_DISPLAY::loop()
{
	static int x = 0;
//	if(PA10.read())
//		 mode = 3;
//	else
//		mode = 4;
	x++;
	if(x == 16) x = 0;
	select_h(x);
	date_lie(&buf[2 * mode + 1][1 + x*2]);
	date_lie(&buf[2 * mode + 1][0 + x*2]);
	date_lie(&buf[2 * mode + 0][1 + x*2]);
	date_lie(&buf[2 * mode + 0][0 + x*2]);
	display(1);
	update();
	delay_us(light);
	display(0);

}


void LED_DISPLAY::date_lie(u8 *date)
{
	write(date,1,MSB_FIRST);
}

void LED_DISPLAY::select_h(u8 hang)
{
	hang += 1;
	if(hang == 16) hang = 0;
	switch(hang)
	{
		case 0:
			ADDR_A0.write(0);
			ADDR_A1.write(0);
			ADDR_A2.write(0);
			ADDR_A3.write(0);
			break;
		case 1:
			ADDR_A0.write(1);
			ADDR_A1.write(0);
			ADDR_A2.write(0);
			ADDR_A3.write(0);
			break;
		case 2:
			ADDR_A0.write(0);
			ADDR_A1.write(1);
			ADDR_A2.write(0);
			ADDR_A3.write(0);
			break;
		case 3:
			ADDR_A0.write(1);
			ADDR_A1.write(1);
			ADDR_A2.write(0);
			ADDR_A3.write(0);
			break;
		case 4:
			ADDR_A0.write(0);
			ADDR_A1.write(0);
			ADDR_A2.write(1);
			ADDR_A3.write(0);
			break;
		case 5:
			ADDR_A0.write(1);
			ADDR_A1.write(0);
			ADDR_A2.write(1);
			ADDR_A3.write(0);
			break;
		case 6:
			ADDR_A0.write(0);
			ADDR_A1.write(1);
			ADDR_A2.write(1);
			ADDR_A3.write(0);
			break;
		case 7:
			ADDR_A0.write(1);
			ADDR_A1.write(1);
			ADDR_A2.write(1);
			ADDR_A3.write(0);
			break;
		case 8:
			ADDR_A0.write(0);
			ADDR_A1.write(0);
			ADDR_A2.write(0);
			ADDR_A3.write(1);
			break;
		case 9:
			ADDR_A0.write(1);
			ADDR_A1.write(0);
			ADDR_A2.write(0);
			ADDR_A3.write(1);
			break;
		case 10:
			ADDR_A0.write(0);
			ADDR_A1.write(1);
			ADDR_A2.write(0);
			ADDR_A3.write(1);
			break;
		case 11:
			ADDR_A0.write(1);
			ADDR_A1.write(1);
			ADDR_A2.write(0);
			ADDR_A3.write(1);
			break;
		case 12:
			ADDR_A0.write(0);
			ADDR_A1.write(0);
			ADDR_A2.write(1);
			ADDR_A3.write(1);
			break;
	
		case 13:
			ADDR_A0.write(1);
			ADDR_A1.write(0);
			ADDR_A2.write(1);
			ADDR_A3.write(1);
			break;
	
		case 14:
			ADDR_A0.write(0);
			ADDR_A1.write(1);
			ADDR_A2.write(1);
			ADDR_A3.write(1);
			break;
	
		case 15:
			ADDR_A0.write(1);
			ADDR_A1.write(1);
			ADDR_A2.write(1);
			ADDR_A3.write(1);
			break;
		default :
			break;

	
	}

}
